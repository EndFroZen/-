#include <stdio.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <driver/gpio.h>
#include <esp_timer.h>
#include <string.h>
#define BUTTON_PIN 35
static bool button_pressed = false;
static uint32_t button_press_start_time = 0;
int numofselect = 0;
int numforspace=0;
char mosrecode[20];
int scal=0;
void blink_task(void *pvParameters) {
  while (1) {
        if (gpio_get_level(BUTTON_PIN) == 0 && !button_pressed) {
            button_pressed = true;
            button_press_start_time = esp_timer_get_time();
        } else if (gpio_get_level(BUTTON_PIN) == 1 && button_pressed) {
            uint32_t press_duration = esp_timer_get_time() - button_press_start_time;
            if (press_duration >= 450000) { // 0.45 seconds in microseconds
                mosrecode[scal]='-';
                numofselect = 0;
                scal++;
                vTaskDelay(250 / portTICK_PERIOD_MS);
                
            } else {
                mosrecode[scal]='.';
                numofselect = 0;
                scal++;
                vTaskDelay(250 / portTICK_PERIOD_MS);
                
            }
            button_pressed = false;
        }
        if(gpio_get_level(BUTTON_PIN) == 0&&numofselect<10){
            numofselect++;
            vTaskDelay(100 / portTICK_PERIOD_MS);
        }else if(numofselect==10){
             if(strcmp(mosrecode, ".-")==0){
        printf("A");
    }else if(strcmp(mosrecode, "-...")==0){
        printf("B");
    }else if(strcmp(mosrecode, "-.-.")==0){
        printf("C");
    }else if(strcmp(mosrecode, "-...")==0){
        printf("D");
    }else if(strcmp(mosrecode, ".")==0){
        printf("E");
    }else if(strcmp(mosrecode, "..-.")==0){
        printf("F");
    }else if(strcmp(mosrecode, "--.")==0){
        printf("G");
    }else if(strcmp(mosrecode, "....")==0){
        printf("H");
    }else if(strcmp(mosrecode, "..")==0){
        printf("I");
    }else if(strcmp(mosrecode, ".---")==0){
        printf("J");
    }else if(strcmp(mosrecode, "-.-")==0){
        printf("K");
    }else if(strcmp(mosrecode, ".-..")==0){
        printf("L");
    }else if(strcmp(mosrecode, "--")==0){
        printf("M");
    }else if(strcmp(mosrecode, "-.")==0){
        printf("N");
    }else if(strcmp(mosrecode, "---")==0){
        printf("O");
    }else if(strcmp(mosrecode, ".--.")==0){
        printf("P");
    }else if(strcmp(mosrecode, "--.-")==0){
        printf("Q");
    }else if(strcmp(mosrecode, ".-.")==0){
        printf("R");
    }else if(strcmp(mosrecode, "...")==0){
        printf("S");
    }else if(strcmp(mosrecode, "-")==0){
        printf("T");
    }else if(strcmp(mosrecode, "..-")==0){
        printf("U");
    }else if(strcmp(mosrecode, "...-")==0){
        printf("V");
    }else if(strcmp(mosrecode, ".--")==0){
        printf("W");
    }else if(strcmp(mosrecode, "-..-")==0){
        printf("X");
    }else if(strcmp(mosrecode, "-.--")==0){
        printf("Y");
    }else if(strcmp(mosrecode, "--..")==0){
        printf("Z");
    }else if(strcmp(mosrecode, ".----")==0){
        printf("1");
    }else if(strcmp(mosrecode, "..---")==0){
        printf("2");
    }else if(strcmp(mosrecode, "...--")==0){
        printf("3");
    }else if(strcmp(mosrecode, "....-")==0){
        printf("4");
    }else if(strcmp(mosrecode, ".....")==0){
        printf("5 ");
    }else if(strcmp(mosrecode, "-....")==0){
        printf("6");
    }else if(strcmp(mosrecode, "--...")==0){
        printf("7");
    }else if(strcmp(mosrecode, "---..")==0){
        printf("8");
    }else if(strcmp(mosrecode, "----.")==0){
        printf("9");
    }else if(strcmp(mosrecode, "-----")==0){
        printf("0");
    }
            for(int i = 0;i<20;i++){
                mosrecode[i] = '\0';
            }
            numforspace++;
            scal=0;
            numofselect = 0;
        }else if(numforspace== 2){
            printf(" ");
            numforspace = 0;
            numofselect = 0;
        }else{
            continue;
        }
        
        vTaskDelay(10 / portTICK_PERIOD_MS); // Check button state every 10ms
    }
}

void app_main(void) {
  // Configure button pin as input
  gpio_config_t io_conf;
  io_conf.intr_type = GPIO_INTR_DISABLE;   // Disable interrupt for simplicity
  io_conf.mode = GPIO_MODE_INPUT;
  io_conf.pin_bit_mask = (1ULL << BUTTON_PIN); // Updated member
  io_conf.pull_up_en = GPIO_PULLUP_DISABLE;  // Assuming external pull-up resistor
  io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;
  gpio_config(&io_conf);



  xTaskCreate(blink_task, "blink_task", 2048, NULL, 5, NULL);
}